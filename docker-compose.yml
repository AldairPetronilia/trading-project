version: '3.8'

services:
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: trading_project_timescaledb
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TIMESCALEDB_TELEMETRY: 'off'
      POSTGRES_SHARED_PRELOAD_LIBRARIES: 'timescaledb'
    ports:
      - "${DB_PORT}:5432"
    volumes:
      # Store data in project root for easy access
      - ./data/timescaledb:/var/lib/postgresql/data
      # Minimal initialization script
      - ./scripts/init-db:/docker-entrypoint-initdb.d
    networks:
      - trading_project_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  energy-data-service:
    build:
      context: .
      dockerfile: energy_data_service/Dockerfile
    container_name: trading_project_energy_service
    depends_on:
      timescaledb:
        condition: service_healthy
    ports:
      - "8000:8000"  # Expose FastAPI server port
    environment:
      - DATABASE__HOST=timescaledb
      - DATABASE__PORT=5432
      - DATABASE__USER=${DB_USER}
      - DATABASE__PASSWORD=${DB_PASSWORD}
      - DATABASE__NAME=${DB_NAME}
      - ENTSOE_CLIENT__API_TOKEN=${ENTSOE_API_TOKEN}
      - SCHEDULER__USE_PERSISTENT_JOB_STORE=false
      - HTTP__HOST=${HTTP_HOST:-0.0.0.0}
      - HTTP__PORT=${HTTP_PORT:-8000}
      - HTTP__ACCESS_LOG=${HTTP_ACCESS_LOG:-true}
    volumes:
      - "./logs:/app/logs"
    networks:
      - trading_project_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/v1/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  adminer:
    image: adminer:latest
    container_name: trading_project_adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: timescaledb
    networks:
      - trading_project_network
    restart: unless-stopped
    depends_on:
      timescaledb:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    container_name: trading_project_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - "./data/grafana:/var/lib/grafana"
    networks:
      - trading_project_network
    restart: unless-stopped
    depends_on:
      timescaledb:
        condition: service_healthy

networks:
  trading_project_network:
    driver: bridge
